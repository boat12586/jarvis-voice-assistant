apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jarvis-mongodb
  namespace: jarvis-v2
  labels:
    app: jarvis-mongodb
    version: "2.0"
    component: database
spec:
  serviceName: jarvis-mongodb
  replicas: 3
  selector:
    matchLabels:
      app: jarvis-mongodb
  template:
    metadata:
      labels:
        app: jarvis-mongodb
        version: "2.0"
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - jarvis-mongodb
              topologyKey: kubernetes.io/hostname
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
          name: mongodb
        command:
        - mongod
        - --replSet
        - jarvis-rs
        - --bind_ip_all
        - --auth
        - --keyFile
        - /etc/mongodb/keyfile
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "jarvis"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jarvis-secrets
              key: mongodb-password
        - name: MONGO_INITDB_DATABASE
          value: "jarvis_v2"
        resources:
          requests:
            memory: "1Gi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /data/configdb
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          subPath: keyfile
          readOnly: true
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d/init.js
          subPath: init.js
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.39
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          value: "mongodb://jarvis:$(MONGO_INITDB_ROOT_PASSWORD)@localhost:27017/jarvis_v2"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jarvis-secrets
              key: mongodb-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "20m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: mongodb-keyfile
        secret:
          secretName: jarvis-mongodb-keyfile
          defaultMode: 0400
      - name: mongodb-init
        configMap:
          name: mongodb-init
      nodeSelector:
        node-type: storage-optimized
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "storage-optimized"
        effect: "NoSchedule"
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "persistent-ssd"
      resources:
        requests:
          storage: 50Gi
  - metadata:
      name: mongodb-config
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "persistent-ssd"
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: jarvis-mongodb
  namespace: jarvis-v2
  labels:
    app: jarvis-mongodb
    version: "2.0"
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: jarvis-mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: jarvis-mongodb-service
  namespace: jarvis-v2
  labels:
    app: jarvis-mongodb
    version: "2.0"
    component: database
spec:
  type: ClusterIP
  selector:
    app: jarvis-mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-replica-set-init
  namespace: jarvis-v2
spec:
  template:
    spec:
      containers:
      - name: init-replica-set
        image: mongo:7
        command:
        - /bin/bash
        - -c
        - |
          mongo --host jarvis-mongodb-0.jarvis-mongodb.jarvis-v2.svc.cluster.local:27017 <<EOF
          rs.initiate({
            _id: "jarvis-rs",
            members: [
              { _id: 0, host: "jarvis-mongodb-0.jarvis-mongodb.jarvis-v2.svc.cluster.local:27017" },
              { _id: 1, host: "jarvis-mongodb-1.jarvis-mongodb.jarvis-v2.svc.cluster.local:27017" },
              { _id: 2, host: "jarvis-mongodb-2.jarvis-mongodb.jarvis-v2.svc.cluster.local:27017" }
            ]
          });
          EOF
      restartPolicy: Never
  backoffLimit: 4