version: '3.8'

services:
  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - jarvis-network

  # Core service - Main orchestrator
  jarvis-core:
    build:
      context: ./services/jarvis-core
      dockerfile: Dockerfile
    container_name: jarvis-core
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      - ./services/jarvis-core:/app
      - ./services/jarvis-plugins:/plugins
      - ./config:/config
    restart: unless-stopped
    networks:
      - jarvis-network

  # Audio service - Real-time TTS/STT
  jarvis-audio:
    build:
      context: ./services/jarvis-audio
      dockerfile: Dockerfile
    container_name: jarvis-audio
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - CORE_SERVICE_URL=http://jarvis-core:8000
    volumes:
      - ./services/jarvis-audio:/app
      - ./config:/config
    restart: unless-stopped
    networks:
      - jarvis-network

  # Web interface - React frontend
  jarvis-web:
    build:
      context: ./services/jarvis-web
      dockerfile: Dockerfile
    container_name: jarvis-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_AUDIO_URL=http://localhost:8001
      - NEXT_PUBLIC_AUDIO_WS_URL=ws://localhost:8001
    depends_on:
      - jarvis-core
      - jarvis-audio
    restart: unless-stopped
    networks:
      - jarvis-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: jarvis-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - jarvis-core
      - jarvis-audio
      - jarvis-web
    restart: unless-stopped
    networks:
      - jarvis-network

  # MongoDB for persistent data storage
  mongodb:
    image: mongo:7
    container_name: jarvis-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jarvis
      - MONGO_INITDB_ROOT_PASSWORD=jarvis_secure_password
      - MONGO_INITDB_DATABASE=jarvis_v2
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    restart: unless-stopped
    networks:
      - jarvis-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - jarvis-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: jarvis-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - jarvis-network

volumes:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  jarvis-network:
    driver: bridge