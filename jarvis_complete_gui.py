#!/usr/bin/env python3
"""
üñ•Ô∏è JARVIS Complete GUI System
‡∏£‡∏∞‡∏ö‡∏ö GUI ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á AI ‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã
"""

import sys
import logging
import time
import threading
from pathlib import Path
from typing import Dict, Any, Optional

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout
from PyQt6.QtCore import QTimer, pyqtSignal, QThread
from PyQt6.QtGui import QFont

try:
    from ui.holographic_interface import HolographicInterface, HologramState
    GUI_AVAILABLE = True
except ImportError:
    GUI_AVAILABLE = False
    logging.warning("GUI components not available")

from jarvis_enhanced_voice import JarvisEnhancedVoice

class VoiceWorkerThread(QThread):
    """‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å GUI"""
    
    # Signals
    voice_recognized = pyqtSignal(str, str, float)  # text, language, confidence
    response_generated = pyqtSignal(str, str)       # text, language
    state_changed = pyqtSignal(str)                 # state
    error_occurred = pyqtSignal(str)                # error message
    
    def __init__(self, jarvis_system):
        super().__init__()
        self.jarvis = jarvis_system
        self.is_running = False
        self.command_queue = []
        self.logger = logging.getLogger(__name__)
    
    def run(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ò‡∏£‡∏î"""
        self.is_running = True
        self.logger.info("üîÑ Voice worker thread started")
        
        while self.is_running:
            try:
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
                if self.command_queue:
                    command = self.command_queue.pop(0)
                    self._process_command(command)
                
                self.msleep(100)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 100ms
                
            except Exception as e:
                self.logger.error(f"‚ùå Voice worker error: {e}")
                self.error_occurred.emit(str(e))
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î"""
        self.is_running = False
        self.wait()
    
    def add_command(self, command: Dict[str, Any]):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß"""
        self.command_queue.append(command)
    
    def _process_command(self, command: Dict[str, Any]):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        cmd_type = command.get('type')
        
        if cmd_type == 'text_message':
            text = command.get('text', '')
            language = command.get('language', 'en')
            
            self.state_changed.emit('processing')
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            response = self.jarvis.ai.get_response(text, language)
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏•‡∏±‡∏ö
            self.response_generated.emit(response, language)
            
            # ‡∏û‡∏π‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            self.jarvis.tts.speak(response, language)
            
            self.state_changed.emit('idle')
            
        elif cmd_type == 'voice_recognition':
            duration = command.get('duration', 5.0)
            
            self.state_changed.emit('listening')
            
            try:
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                self.jarvis.start_voice_conversation(duration)
                
            except Exception as e:
                self.error_occurred.emit(f"Voice recognition failed: {e}")
                self.state_changed.emit('error')

class JarvisCompleteGUI(QMainWindow):
    """‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã GUI ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á JARVIS"""
    
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        self.jarvis = JarvisEnhancedVoice()
        if not self.jarvis.start_system():
            self.logger.error("‚ùå Failed to start JARVIS voice system")
            return
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI
        if GUI_AVAILABLE:
            self.holographic_interface = HolographicInterface()
            self._setup_ui()
            self._setup_voice_integration()
        else:
            self.logger.error("‚ùå GUI not available")
            return
        
        self.logger.info("‚úÖ JARVIS Complete GUI initialized")
    
    def _setup_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI"""
        self.setWindowTitle("JARVIS - Complete AI Assistant")
        self.setGeometry(100, 100, 1400, 900)
        
        # ‡πÉ‡∏ä‡πâ holographic interface ‡πÄ‡∏õ‡πá‡∏ô central widget
        self.setCentralWidget(self.holographic_interface)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        self.holographic_interface.voice_btn.clicked.connect(self._on_voice_button)
        self.holographic_interface.chat_btn.clicked.connect(self._on_chat_button)
        self.holographic_interface.news_btn.clicked.connect(self._on_news_button)
        self.holographic_interface.status_btn.clicked.connect(self._on_status_button)
        self.holographic_interface.settings_btn.clicked.connect(self._on_settings_button)
        self.holographic_interface.help_btn.clicked.connect(self._on_help_button)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.holographic_interface.add_conversation_entry(
            "SYSTEM", "JARVIS Complete AI Assistant initialized successfully"
        )
        self.holographic_interface.add_conversation_entry(
            "JARVIS", "Good day, sir. I am ready to assist you."
        )
    
    def _setup_voice_integration(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        self.voice_worker = VoiceWorkerThread(self.jarvis)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        self.voice_worker.voice_recognized.connect(self._on_voice_recognized)
        self.voice_worker.response_generated.connect(self._on_response_generated)
        self.voice_worker.state_changed.connect(self._on_state_changed)
        self.voice_worker.error_occurred.connect(self._on_error_occurred)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ò‡∏£‡∏î
        self.voice_worker.start()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ó‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self._update_system_status)
        self.status_timer.start(1000)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    def _on_voice_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        self.logger.info("üé§ Voice button clicked")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
        command = {
            'type': 'voice_recognition',
            'duration': 5.0
        }
        self.voice_worker.add_command(command)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        self.holographic_interface.add_conversation_entry(
            "SYSTEM", "Listening for voice input... (5 seconds)"
        )
    
    def _on_chat_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏ó"""
        self.logger.info("üí¨ Chat button clicked")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô dialog)
        test_messages = [
            "Hello JARVIS, how are you?",
            "What time is it?",
            "What can you do?",
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
            "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢"
        ]
        
        import random
        message = random.choice(test_messages)
        language = "th" if any(ord(c) > 127 for c in message) else "en"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        self.holographic_interface.add_conversation_entry("USER", message)
        
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        command = {
            'type': 'text_message',
            'text': message,
            'language': language
        }
        self.voice_worker.add_command(command)
    
    def _on_news_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß"""
        self.logger.info("üì∞ News button clicked")
        self.holographic_interface.add_conversation_entry(
            "SYSTEM", "News system is under development"
        )
    
    def _on_status_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.logger.info("üìä Status button clicked")
        status = self.jarvis.get_status()
        
        status_text = f"System Status:\n"
        status_text += f"Active: {status['active']}\n"
        status_text += f"Interactions: {status['interactions']}\n"
        status_text += f"Voice Recognitions: {status['voice_recognitions']}\n"
        status_text += f"Uptime: {status['uptime_seconds']:.1f}s\n"
        status_text += f"Components: {status['components']}"
        
        self.holographic_interface.add_conversation_entry("SYSTEM", status_text)
    
    def _on_settings_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        self.logger.info("‚öôÔ∏è Settings button clicked")
        self.holographic_interface.add_conversation_entry(
            "SYSTEM", "Settings panel is under development"
        )
    
    def _on_help_button(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        self.logger.info("‚ùì Help button clicked")
        
        help_text = """JARVIS Complete AI Assistant

Available Features:
üé§ Voice Recognition - Click to start voice input
üí¨ Chat - Send text messages
üì∞ News - Get latest news (coming soon)
üìä Status - Check system status
‚öôÔ∏è Settings - Configure system (coming soon)
‚ùì Help - Show this help

Voice Commands:
- "Hello JARVIS" - Greeting
- "What time is it?" - Get current time
- "What's the date?" - Get current date
- "What can you do?" - Show capabilities
- "Thank you" - Express gratitude
- "Goodbye" - End conversation

Thai Commands:
- "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö" - ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
- "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢" - ‡∏ñ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
- "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà" - ‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
- "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö" - ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì"""
        
        self.holographic_interface.add_conversation_entry("JARVIS", help_text)
    
    def _on_voice_recognized(self, text: str, language: str, confidence: float):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ"""
        self.holographic_interface.add_conversation_entry(
            "USER", f"{text} (confidence: {confidence:.2f})"
        )
    
    def _on_response_generated(self, text: str, language: str):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏î‡πâ"""
        self.holographic_interface.add_conversation_entry("JARVIS", text)
    
    def _on_state_changed(self, state: str):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        state_map = {
            'idle': HologramState.IDLE,
            'listening': HologramState.LISTENING,
            'processing': HologramState.PROCESSING,
            'responding': HologramState.RESPONDING,
            'error': HologramState.ERROR
        }
        
        hologram_state = state_map.get(state, HologramState.IDLE)
        self.holographic_interface.set_state(hologram_state)
    
    def _on_error_occurred(self, error: str):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        self.holographic_interface.add_conversation_entry("ERROR", error)
        self.holographic_interface.set_state(HologramState.ERROR)
    
    def _update_system_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ß‡∏•‡∏≤
        self.holographic_interface.update_status_display()
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        status = self.jarvis.get_status()
        self.holographic_interface.set_progress(
            min(status['interactions'] / 10.0, 1.0)  # Progress based on interactions
        )
    
    def closeEvent(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û"""
        self.logger.info("üõë Closing JARVIS Complete GUI...")
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if hasattr(self, 'voice_worker'):
            self.voice_worker.stop()
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        self.jarvis.stop_system()
        
        event.accept()


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    if not GUI_AVAILABLE:
        print("‚ùå GUI components not available")
        print("üí° Try running: pip install PyQt6")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    app = QApplication(sys.argv)
    app.setApplicationName("JARVIS Complete AI Assistant")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
    font = QFont("Courier New", 10)
    app.setFont(font)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á JARVIS GUI
    try:
        jarvis_gui = JarvisCompleteGUI()
        jarvis_gui.show()
        
        print("üöÄ JARVIS Complete GUI started successfully!")
        print("üéôÔ∏è Click the Voice button to start voice interaction")
        print("üí¨ Click the Chat button for text interaction")
        print("üìä Click the Status button to check system status")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏û
        sys.exit(app.exec())
        
    except Exception as e:
        logging.error(f"‚ùå Failed to start JARVIS GUI: {e}")
        print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    main()