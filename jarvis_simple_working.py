#!/usr/bin/env python3
"""
ü§ñ JARVIS Simple Working Voice Assistant
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö JARVIS ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
"""

import logging
import time
import threading
import queue
from pathlib import Path
from typing import Dict, Any, Optional
import sounddevice as sd
import numpy as np
import yaml

# Basic AI Response System
class SimpleAI:
    """AI ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢"""
    
    def __init__(self):
        self.responses = {
            'en': {
                'hello': "Hello! I'm JARVIS, your voice assistant. How can I help you?",
                'time': f"The current time is {time.strftime('%H:%M:%S')}",
                'weather': "I don't have weather data access yet, but I'm working on it!",
                'goodbye': "Goodbye! Have a great day!",
                'default': "I understand. How can I assist you further?"
            },
            'th': {
                'hello': "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏° JARVIS ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö",
                'time': f"‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ {time.strftime('%H:%M:%S')} ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö",
                'weather': "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö",
                'goodbye': "‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
                'default': "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö"
            }
        }
    
    def get_response(self, text: str, language: str = 'en') -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á"""
        text_lower = text.lower()
        lang_responses = self.responses.get(language, self.responses['en'])
        
        # Simple keyword matching
        if any(word in text_lower for word in ['hello', 'hi', 'hey', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ']):
            return lang_responses['hello']
        elif any(word in text_lower for word in ['time', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á']):
            return lang_responses['time']
        elif any(word in text_lower for word in ['weather', '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®']):
            return lang_responses['weather']
        elif any(word in text_lower for word in ['bye', 'goodbye', '‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô', '‡∏ö‡∏≤‡∏¢']):
            return lang_responses['goodbye']
        else:
            return lang_responses['default']

# Voice Activity Detection
class SimpleVoiceDetector:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢"""
    
    def __init__(self, sample_rate=16000, threshold=0.01):
        self.sample_rate = sample_rate
        self.threshold = threshold
        self.is_speaking = False
        
    def detect_speech(self, audio_data):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (RMS)
        rms = np.sqrt(np.mean(audio_data**2))
        return rms > self.threshold

# Text-to-Speech (Mock)
class SimpleTTS:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
    def speak(self, text: str, language: str = 'en'):
        """‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (mock)"""
        self.logger.info(f"üó£Ô∏è JARVIS says ({language}): {text}")
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° TTS ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        print(f"ü§ñ JARVIS: {text}")

# Main JARVIS System
class JarvisSimpleWorking:
    """‡∏£‡∏∞‡∏ö‡∏ö JARVIS ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    
    def __init__(self, config_path: str = "config/default_config.yaml"):
        self.logger = logging.getLogger(__name__)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.config = self._load_config(config_path)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
        self.ai = SimpleAI()
        self.voice_detector = SimpleVoiceDetector()
        self.tts = SimpleTTS()
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        self.is_active = False
        self.is_listening = False
        self.conversation_active = False
        
        # Audio settings
        self.sample_rate = 16000
        self.chunk_size = 1024
        self.audio_queue = queue.Queue()
        
        # Statistics
        self.stats = {
            "interactions": 0,
            "start_time": time.time()
        }
        
        self.logger.info("‚úÖ JARVIS Simple Working System initialized")
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            if Path(config_path).exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f) or {}
                self.logger.info(f"‚úÖ Config loaded from {config_path}")
                return config
            else:
                self.logger.warning(f"‚ö†Ô∏è Config file not found: {config_path}")
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå Config loading failed: {e}")
            return {}
    
    def start_system(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö JARVIS"""
        if self.is_active:
            self.logger.warning("‚ö†Ô∏è System already active")
            return True
        
        self.logger.info("üöÄ Starting JARVIS Simple System...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            devices = sd.query_devices()
            self.logger.info(f"üì± Found {len(devices)} audio devices")
            
            self.is_active = True
            self.stats["start_time"] = time.time()
            
            self.logger.info("‚úÖ JARVIS is now active!")
            self.logger.info("üí¨ Type 'listen' to start voice conversation")
            self.logger.info("üí¨ Type 'chat <message>' to send text message")
            self.logger.info("üí¨ Type 'quit' to exit")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå System startup failed: {e}")
            return False
    
    def stop_system(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö JARVIS"""
        if not self.is_active:
            return
        
        self.logger.info("üõë Stopping JARVIS Simple System...")
        
        self.is_active = False
        self.is_listening = False
        self.conversation_active = False
        
        self.logger.info("‚úÖ JARVIS stopped")
    
    def start_listening(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        if self.is_listening:
            self.logger.warning("‚ö†Ô∏è Already listening")
            return
        
        self.logger.info("üé§ Starting to listen...")
        self.is_listening = True
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° recording thread
            self.record_thread = threading.Thread(target=self._record_audio)
            self.record_thread.daemon = True
            self.record_thread.start()
            
            self.logger.info("‚úÖ Listening started - speak now!")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to start listening: {e}")
            self.is_listening = False
    
    def stop_listening(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        self.logger.info("üîá Stopping listening...")
        self.is_listening = False
    
    def _record_audio(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        def audio_callback(indata, frames, time, status):
            if status:
                self.logger.warning(f"Audio status: {status}")
            
            if self.is_listening:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self.voice_detector.detect_speech(indata.flatten()):
                    self.audio_queue.put(indata.copy())
        
        try:
            with sd.InputStream(
                samplerate=self.sample_rate,
                channels=1,
                callback=audio_callback,
                blocksize=self.chunk_size
            ):
                while self.is_listening:
                    time.sleep(0.1)
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ
                    if not self.audio_queue.empty():
                        self._process_audio_queue()
                        
        except Exception as e:
            self.logger.error(f"‚ùå Audio recording error: {e}")
            self.is_listening = False
    
    def _process_audio_queue(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ"""
        audio_chunks = []
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        while not self.audio_queue.empty():
            try:
                chunk = self.audio_queue.get_nowait()
                audio_chunks.append(chunk)
            except queue.Empty:
                break
        
        if audio_chunks:
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Mock Speech Recognition)
            self.logger.info("üîç Processing speech...")
            
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            mock_text = "Hello JARVIS"
            mock_language = "en"
            
            self._handle_recognized_speech(mock_text, mock_language)
    
    def _handle_recognized_speech(self, text: str, language: str):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÑ‡∏î‡πâ"""
        self.logger.info(f"üìù Recognized: '{text}' ({language})")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        response = self.ai.get_response(text, language)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        self.tts.speak(response, language)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.stats["interactions"] += 1
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ö
        self.stop_listening()
    
    def process_text_message(self, text: str, language: str = "en"):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        self.logger.info(f"üí¨ Processing text: '{text}'")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        response = self.ai.get_response(text, language)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        self.tts.speak(response, language)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.stats["interactions"] += 1
    
    def get_status(self) -> Dict[str, Any]:
        """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        uptime = time.time() - self.stats["start_time"]
        
        return {
            "active": self.is_active,
            "listening": self.is_listening,
            "conversation_active": self.conversation_active,
            "interactions": self.stats["interactions"],
            "uptime_seconds": uptime
        }
    
    def run_interactive(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö Interactive"""
        if not self.start_system():
            return
        
        print("\nüéôÔ∏è JARVIS Interactive Mode")
        print("Commands:")
        print("  listen          - Start voice listening")
        print("  chat <message>  - Send text message")
        print("  status          - Show system status")
        print("  quit            - Exit")
        
        try:
            while self.is_active:
                user_input = input("\n> ").strip()
                
                if not user_input:
                    continue
                
                if user_input.lower() == 'quit':
                    break
                elif user_input.lower() == 'listen':
                    self.start_listening()
                    print("üé§ Listening... (will auto-stop after processing)")
                    time.sleep(5)  # Listen for 5 seconds
                    self.stop_listening()
                elif user_input.lower().startswith('chat '):
                    message = user_input[5:]
                    self.process_text_message(message)
                elif user_input.lower() == 'status':
                    status = self.get_status()
                    print(f"üìä Status: {status}")
                else:
                    self.process_text_message(user_input)
                    
        except KeyboardInterrupt:
            print("\nüõë Interrupted by user")
        finally:
            self.stop_system()
            print("üëã Goodbye!")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("ü§ñ JARVIS Simple Working Voice Assistant")
    print("======================================")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ JARVIS
    jarvis = JarvisSimpleWorking()
    jarvis.run_interactive()


if __name__ == "__main__":
    main()