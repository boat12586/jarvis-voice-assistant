#!/usr/bin/env python3
"""
ü§ñ JARVIS Voice Assistant v2.0 - Core Version
‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á JARVIS ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° voice processing (‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏≠ dependencies)

Version: 2.0.0 (2025 Edition)
Author: JARVIS Development Team
"""

import sys
import os
import logging
from pathlib import Path

# Add src to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

def setup_core_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö core version"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/jarvis_core.log')
        ]
    )

def main():
    """‡∏£‡∏±‡∏ô JARVIS Core version"""
    print("=" * 60)
    print("ü§ñ JARVIS Voice Assistant v2.0 - Core Version")
    print("=" * 60)
    print("‚ö° Starting core systems...")
    
    try:
        # Setup logging
        setup_core_logging()
        logger = logging.getLogger(__name__)
        logger.info("ü§ñ JARVIS Core starting...")
        
        # Import core systems
        from system.config_manager_v2 import ConfigurationManager, JarvisConfig
        from utils.performance_monitor import PerformanceMonitor
        from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, QPushButton
        from PyQt6.QtCore import Qt, QTimer
        from PyQt6.QtGui import QFont, QPalette, QColor
        
        print("‚úÖ Core imports successful")
        logger.info("‚úÖ All core modules imported successfully")
        
        # Initialize configuration
        print("üîß Initializing configuration...")
        config_manager = ConfigurationManager()
        config = JarvisConfig()
        logger.info("‚úÖ Configuration initialized")
        
        # Initialize performance monitoring
        print("üìä Starting performance monitoring...")
        monitor = PerformanceMonitor()
        monitor.start_monitoring()
        logger.info("‚úÖ Performance monitoring started")
        
        # Get system recommendations
        recommendations = config_manager.get_system_recommendations()
        for key, rec in recommendations.items():
            print(f"üí° {key.upper()}: {rec}")
        
        # Create GUI application
        print("üñ•Ô∏è Creating GUI application...")
        app = QApplication(sys.argv)
        
        # Set application properties
        app.setApplicationName("JARVIS Voice Assistant")
        app.setApplicationVersion("2.0.0")
        
        # Create main window
        window = QMainWindow()
        window.setWindowTitle("ü§ñ JARVIS Voice Assistant v2.0 - Core Mode")
        window.setGeometry(200, 200, 800, 600)
        
        # Set dark theme
        window.setStyleSheet("""
            QMainWindow {
                background-color: #1a1a1a;
                color: #00ff41;
            }
            QLabel {
                color: #00ff41;
                font-family: 'Courier New', monospace;
            }
            QPushButton {
                background-color: #333;
                color: #00ff41;
                border: 1px solid #00ff41;
                padding: 10px;
                border-radius: 5px;
                font-family: 'Courier New', monospace;
            }
            QPushButton:hover {
                background-color: #00ff41;
                color: #000;
            }
        """)
        
        # Create central widget and layout
        central_widget = QWidget()
        window.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Title
        title = QLabel("ü§ñ JARVIS VOICE ASSISTANT v2.0")
        title.setFont(QFont("Courier New", 24, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Status
        status = QLabel("‚úÖ CORE SYSTEMS OPERATIONAL")
        status.setFont(QFont("Courier New", 18))
        status.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(status)
        
        # System info
        system_info = monitor.get_system_info()
        info_text = f"""
üìä SYSTEM STATUS:
üíª Platform: {system_info.get('platform', 'Unknown')}
üß† CPU Cores: {system_info.get('cpu_count', 'Unknown')}
üíæ RAM: {system_info.get('memory_total_gb', 'Unknown')} GB
üêç Python: {system_info.get('python_version', 'Unknown')}

‚ö° AI SYSTEMS:
‚úÖ PyTorch: Ready
‚úÖ Transformers: Ready
üîÑ Voice Processing: Pending dependencies

üéØ READY FOR:
‚Ä¢ Configuration Management
‚Ä¢ Performance Monitoring  
‚Ä¢ GUI Operations
‚Ä¢ Basic AI Processing

‚è≥ PENDING:
‚Ä¢ Voice Recognition (faster-whisper deps)
‚Ä¢ Text-to-Speech (TTS deps)
‚Ä¢ Audio Processing (audio deps)
        """
        
        info_label = QLabel(info_text)
        info_label.setFont(QFont("Courier New", 10))
        info_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
        layout.addWidget(info_label)
        
        # Buttons
        button_layout = QVBoxLayout()
        
        config_btn = QPushButton("üîß Show Configuration")
        performance_btn = QPushButton("üìä Show Performance")
        test_ai_btn = QPushButton("üß† Test AI Systems")
        
        button_layout.addWidget(config_btn)
        button_layout.addWidget(performance_btn)
        button_layout.addWidget(test_ai_btn)
        
        layout.addLayout(button_layout)
        
        # Button handlers
        def show_config():
            print("\\nüîß JARVIS Configuration:")
            print(f"   Version: {config.version}")
            print(f"   Environment: {config.environment}")
            print(f"   Personality: {config.personality_name}")
            print(f"   Language: {config.voice.language}")
            
        def show_performance():
            current_metrics = monitor.collect_metrics()
            print("\\nüìä Performance Metrics:")
            print(f"   CPU: {current_metrics['cpu_percent']:.1f}%")
            print(f"   Memory: {current_metrics['memory']['percent']:.1f}%")
            print(f"   Uptime: {current_metrics['uptime']/60:.1f} minutes")
            
        def test_ai():
            print("\\nüß† Testing AI Systems...")
            try:
                import torch
                import transformers
                print("‚úÖ PyTorch version:", torch.__version__)
                print("‚úÖ Transformers version:", transformers.__version__)
                print("‚úÖ AI systems ready for integration")
            except Exception as e:
                print(f"‚ùå AI test failed: {e}")
        
        config_btn.clicked.connect(show_config)
        performance_btn.clicked.connect(show_performance)
        test_ai_btn.clicked.connect(test_ai)
        
        # Show window
        window.show()
        logger.info("‚úÖ JARVIS GUI launched successfully")
        
        print("\\nüéâ JARVIS Core v2.0 is running!")
        print("üñ•Ô∏è GUI window opened - Core systems operational")
        print("üìù Check logs/jarvis_core.log for detailed logs")
        print("üîÑ Voice processing will be enabled when dependencies are complete")
        print("\\n‚ö° JARVIS Core is ready! Use the GUI to explore features.")
        
        # Auto-show system status every 30 seconds
        def periodic_status():
            metrics = monitor.collect_metrics()
            logger.info(f"üìä CPU: {metrics['cpu_percent']:.1f}%, Memory: {metrics['memory']['percent']:.1f}%")
        
        timer = QTimer()
        timer.timeout.connect(periodic_status)
        timer.start(30000)  # 30 seconds
        
        # Run the application
        exit_code = app.exec()
        
        # Cleanup
        monitor.stop_monitoring()
        logger.info("üëã JARVIS Core shutdown complete")
        
        return exit_code
        
    except Exception as e:
        print(f"üí• Critical error: {e}")
        logging.error(f"Critical error in JARVIS Core: {e}", exc_info=True)
        return 1

if __name__ == "__main__":
    sys.exit(main())