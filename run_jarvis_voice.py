#!/usr/bin/env python3
"""
üéôÔ∏è JARVIS Voice Assistant v2.0 - Full Voice System
‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö JARVIS ‡∏û‡∏£‡πâ‡∏≠‡∏° Voice Recognition ‡πÅ‡∏•‡∏∞ TTS

Version: 2.0.0 (2025 Edition)
"""

import sys
import os
import logging
import threading
import time
from pathlib import Path

# Add src to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

def setup_voice_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö voice version"""
    # Create logs directory
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/jarvis_voice.log')
        ]
    )

def main():
    """‡∏£‡∏±‡∏ô JARVIS Voice version"""
    print("=" * 60)
    print("üéôÔ∏è JARVIS Voice Assistant v2.0 - Full Voice System")
    print("=" * 60)
    print("‚ö° Starting voice-enabled systems...")
    
    try:
        # Setup logging
        setup_voice_logging()
        logger = logging.getLogger(__name__)
        logger.info("üéôÔ∏è JARVIS Voice system starting...")
        
        # Import core systems
        from system.config_manager_v2 import ConfigurationManager, JarvisConfig
        from utils.performance_monitor import PerformanceMonitor
        from voice import VoiceController
        from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, QPushButton, QTextEdit
        from PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal
        from PyQt6.QtGui import QFont
        
        print("‚úÖ All imports successful")
        logger.info("‚úÖ All modules imported successfully")
        
        # Initialize configuration
        print("üîß Initializing configuration...")
        config_manager = ConfigurationManager()
        config = JarvisConfig()
        logger.info("‚úÖ Configuration initialized")
        
        # Initialize performance monitoring
        print("üìä Starting performance monitoring...")
        monitor = PerformanceMonitor()
        monitor.start_monitoring()
        logger.info("‚úÖ Performance monitoring started")
        
        # Initialize voice controller
        print("üéôÔ∏è Initializing voice system...")
        voice_controller = VoiceController(use_fallback_tts=True)
        voice_status = voice_controller.get_status()
        
        for key, value in voice_status.items():
            print(f"   {key}: {value}")
        logger.info("‚úÖ Voice system initialized")
        
        # Create GUI application
        print("üñ•Ô∏è Creating voice-enabled GUI...")
        app = QApplication(sys.argv)
        
        # Set application properties
        app.setApplicationName("JARVIS Voice Assistant")
        app.setApplicationVersion("2.0.0")
        
        # Create main window
        window = QMainWindow()
        window.setWindowTitle("üéôÔ∏è JARVIS Voice Assistant v2.0 - Voice Enabled")
        window.setGeometry(200, 200, 1000, 700)
        
        # Set Matrix-style theme
        window.setStyleSheet("""
            QMainWindow {
                background-color: #0a0a0a;
                color: #00ff41;
            }
            QLabel {
                color: #00ff41;
                font-family: 'Courier New', monospace;
            }
            QPushButton {
                background-color: #1a1a1a;
                color: #00ff41;
                border: 2px solid #00ff41;
                padding: 12px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #00ff41;
                color: #000;
                box-shadow: 0 0 15px #00ff41;
            }
            QTextEdit {
                background-color: #1a1a1a;
                color: #00ff41;
                border: 1px solid #00ff41;
                font-family: 'Courier New', monospace;
                font-size: 11px;
            }
        """)
        
        # Create central widget and layout
        central_widget = QWidget()
        window.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Title
        title = QLabel("üéôÔ∏è JARVIS VOICE ASSISTANT v2.0")
        title.setFont(QFont("Courier New", 24, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Status
        status = QLabel("‚úÖ VOICE SYSTEMS OPERATIONAL")
        status.setFont(QFont("Courier New", 18))
        status.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(status)
        
        # System info
        system_info = monitor.get_system_info()
        info_text = f"""
üìä SYSTEM STATUS:
üíª Platform: {system_info.get('platform', 'Unknown')}
üß† CPU Cores: {system_info.get('cpu_count', 'Unknown')}
üíæ RAM: {system_info.get('memory_total_gb', 'Unknown')} GB
üêç Python: {system_info.get('python_version', 'Unknown')}

üéôÔ∏è VOICE SYSTEMS:
‚úÖ Speech Recognition: {voice_status['speech_recognition']}
‚úÖ Text-to-Speech: {voice_status['text_to_speech']}
üó£Ô∏è  Language: {voice_status['language']}
üéØ Wake Word: "{voice_status['wake_word']}"

üöÄ READY FOR:
‚Ä¢ Voice Command Processing
‚Ä¢ Speech Recognition
‚Ä¢ Text-to-Speech Responses
‚Ä¢ Full Voice Conversation
‚Ä¢ Real-time Audio Processing
        """
        
        info_label = QLabel(info_text)
        info_label.setFont(QFont("Courier New", 10))
        info_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
        layout.addWidget(info_label)
        
        # Voice output display
        voice_output = QTextEdit()
        voice_output.setMaximumHeight(150)
        voice_output.setPlaceholderText("Voice conversation will appear here...")
        layout.addWidget(voice_output)
        
        # Voice control buttons
        button_layout = QVBoxLayout()
        
        listen_btn = QPushButton("üé§ Listen for Command (5s)")
        test_tts_btn = QPushButton("üó£Ô∏è  Test Text-to-Speech")
        conversation_btn = QPushButton("üí¨ Start Voice Conversation")
        
        button_layout.addWidget(listen_btn)
        button_layout.addWidget(test_tts_btn)
        button_layout.addWidget(conversation_btn)
        
        layout.addLayout(button_layout)
        
        # Voice handler functions
        def listen_for_command():
            """Listen for voice command"""
            voice_output.append("üé§ Listening for command...")
            voice_output.repaint()
            
            # Run in thread to avoid blocking GUI
            def listen_thread():
                try:
                    command = voice_controller.listen_for_command(duration=5.0)
                    if command:
                        voice_output.append(f"üë§ You said: {command}")
                        response = voice_controller.process_voice_command(command)
                        voice_output.append(f"ü§ñ JARVIS: {response}")
                        voice_controller.speak_response(response)
                    else:
                        voice_output.append("üîá No speech detected")
                except Exception as e:
                    voice_output.append(f"‚ùå Error: {e}")
            
            threading.Thread(target=listen_thread, daemon=True).start()
        
        def test_tts():
            """Test text-to-speech"""
            test_message = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ JARVIS ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            voice_output.append(f"üó£Ô∏è  Testing TTS: {test_message}")
            voice_controller.speak_response(test_message)
        
        def start_conversation():
            """Start voice conversation"""
            voice_output.append("üí¨ Starting voice conversation...")
            voice_output.append("üó£Ô∏è  Say '‡∏´‡∏¢‡∏∏‡∏î' or 'stop' to end conversation")
            
            def conversation_thread():
                try:
                    voice_controller.speak_response("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ JARVIS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
                    
                    conversation_active = True
                    while conversation_active:
                        voice_controller.speak_response("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")
                        command = voice_controller.listen_for_command(duration=5.0)
                        
                        if not command:
                            voice_controller.speak_response("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö")
                            continue
                        
                        voice_output.append(f"üë§ Command: {command}")
                        
                        if "‡∏´‡∏¢‡∏∏‡∏î" in command or "‡∏õ‡∏¥‡∏î" in command or "stop" in command:
                            voice_controller.speak_response("‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö!")
                            voice_output.append("üëã Conversation ended")
                            break
                        
                        response = voice_controller.process_voice_command(command)
                        voice_output.append(f"ü§ñ Response: {response}")
                        voice_controller.speak_response(response)
                        
                except Exception as e:
                    voice_output.append(f"‚ùå Conversation error: {e}")
            
            threading.Thread(target=conversation_thread, daemon=True).start()
        
        # Connect button handlers
        listen_btn.clicked.connect(listen_for_command)
        test_tts_btn.clicked.connect(test_tts)
        conversation_btn.clicked.connect(start_conversation)
        
        # Show window
        window.show()
        logger.info("‚úÖ JARVIS Voice GUI launched successfully")
        
        print("\nüéâ JARVIS Voice v2.0 is running!")
        print("üéôÔ∏è Full voice system operational")
        print("üìù Check logs/jarvis_voice.log for detailed logs")
        print("\n‚ö° JARVIS Voice Assistant is ready! Use the voice controls.")
        print("üé§ Click 'Listen for Command' to start voice interaction")
        print("üó£Ô∏è  Click 'Test TTS' to test speech output")
        print("üí¨ Click 'Start Voice Conversation' for continuous chat")
        
        # Auto-show system status every 30 seconds
        def periodic_status():
            metrics = monitor.collect_metrics()
            logger.info(f"üìä CPU: {metrics['cpu_percent']:.1f}%, Memory: {metrics['memory']['percent']:.1f}%")
        
        timer = QTimer()
        timer.timeout.connect(periodic_status)
        timer.start(30000)  # 30 seconds
        
        # Run the application
        exit_code = app.exec()
        
        # Cleanup
        monitor.stop_monitoring()
        logger.info("üëã JARVIS Voice system shutdown complete")
        
        return exit_code
        
    except Exception as e:
        print(f"üí• Critical error: {e}")
        logging.error(f"Critical error in JARVIS Voice: {e}", exc_info=True)
        return 1

if __name__ == "__main__":
    sys.exit(main())