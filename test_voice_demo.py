#!/usr/bin/env python3
"""
üé§ JARVIS Voice Demo
‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á JARVIS

Version: 2.0.0 (2025 Edition)
"""

import sys
import logging
from pathlib import Path

# Add src to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

def setup_demo_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(levelname)s - %(message)s'
    )

def voice_demo():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á JARVIS"""
    print("üé§ JARVIS Voice Demo")
    print("=" * 40)
    
    try:
        from voice import VoiceController
        
        # Initialize voice controller
        print("üîß Initializing JARVIS Voice System...")
        voice = VoiceController(use_fallback_tts=True)
        
        # Show system status
        status = voice.get_status()
        print(f"\nüìä Voice System Status:")
        for key, value in status.items():
            emoji = "‚úÖ" if value else "‚ùå"
            print(f"   {emoji} {key}: {value}")
        
        print(f"\nüéôÔ∏è Voice System Demo")
        print("=" * 40)
        
        # Test basic commands
        test_commands = [
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
            "‡∏ä‡∏∑‡πà‡∏≠",
            "‡πÄ‡∏ß‡∏•‡∏≤", 
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
            "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì"
        ]
        
        print("üó£Ô∏è  Testing voice commands:")
        for i, command in enumerate(test_commands, 1):
            print(f"\n{i}. Testing command: '{command}'")
            response = voice.process_voice_command(command)
            print(f"   ü§ñ JARVIS Response: {response}")
            
            # Speak the response
            voice.speak_response(response)
            
            # Small delay between commands
            import time
            time.sleep(1)
        
        # Test English commands
        print(f"\nüåç Testing English commands:")
        english_commands = ["hello", "name", "time"]
        
        for i, command in enumerate(english_commands, 1):
            print(f"\n{i}. Testing English: '{command}'")
            response = voice.process_voice_command(command)
            print(f"   ü§ñ JARVIS Response: {response}")
            voice.speak_response(response)
            import time
            time.sleep(1)
        
        print(f"\nüéâ Voice Demo Complete!")
        print("‚ú® JARVIS Voice System is fully operational!")
        
        # Show final system info
        print(f"\nüìã System Summary:")
        print(f"   üé§ Speech Recognition: {'Ready' if status['speech_recognition'] else 'Not Available'}")
        print(f"   üó£Ô∏è  Text-to-Speech: {'Ready' if status['text_to_speech'] else 'Not Available'}")
        print(f"   üåê Language: {status['language']}")
        print(f"   üéØ Wake Word: {status['wake_word']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Voice demo failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def interactive_demo():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ microphone)"""
    print(f"\nüéôÔ∏è Interactive Voice Demo")
    print("=" * 40)
    
    try:
        from voice import VoiceController
        
        voice = VoiceController(use_fallback_tts=True)
        
        if voice.get_status()['speech_recognition']:
            print("üé§ Microphone test available!")
            print("‚ÑπÔ∏è  For full microphone testing, run: python3 run_jarvis_voice.py")
            
            # Test if we can initialize speech recognizer
            from voice import SimpleSpeechRecognizer
            recognizer = SimpleSpeechRecognizer()
            
            if recognizer.is_available():
                print("‚úÖ Speech recognizer ready for microphone input")
                print("üîä Audio devices available:")
                devices = recognizer.get_audio_devices()
                if devices:
                    for i, device in enumerate(devices[:3]):  # Show first 3
                        print(f"   {i+1}. {device.get('name', 'Unknown Device')}")
                else:
                    print("   No audio devices found")
            else:
                print("‚ö†Ô∏è  Speech recognizer not available")
        else:
            print("‚ÑπÔ∏è  Speech recognition not available in current environment")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Interactive demo setup failed: {e}")
        return False

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï"""
    setup_demo_logging()
    
    print("ü§ñ JARVIS Voice Assistant v2.0 - Demo")
    print("=" * 50)
    
    success = True
    
    # Run voice demo
    if not voice_demo():
        success = False
    
    # Run interactive demo
    if not interactive_demo():
        success = False
    
    if success:
        print(f"\nüéâ All demos completed successfully!")
        print(f"üöÄ Ready to run full JARVIS Voice Assistant:")
        print(f"   python3 run_jarvis_voice.py")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  Some demos failed. Check the errors above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())